<?php
class UsersController extends AuthAppController {
    var $components = array('Auth', 'Email', 'CustomLayouts');
    var $helpers = array('Html', 'Javascript', 'auth.Gravatar');

    /**
     * Runs automatically before the controller action is called
     */
    function beforeFilter(){
        $this->Auth->allow('register', 'recover', 'verify');
        parent::beforeFilter();

        // Options (maybe should be placed in a different place :S)
        $this->gravatar['active'] = true; // Try to use the user Gravatar if there is one
        $this->gravatar['rating'] = 'g'; // the maximum Gravatar rating allowed
        $this->gravatar['size'] = 50; // default size for the Gravatar image
        $this->from_support_email = __('Sitebot <noreply@example.com>', true); // Sender e-mail address for user's contacts
    }

    /**
     * Registration page for new users
     */
    function register(){
        if ($this->Auth->user())
            $this->redirect(array('controller' => 'users', 'action' => 'account'));

        if (!empty($this->data)) {

            // Create an autogenerated password to pass Model validation and to send it to the provided email address (and confirm it's real, btw ;)) 
            $password = $this->User->generatePassword();
            $this->data['User']['password'] = Security::hash($password, null, true);
            $this->data['User']['password_confirm'] = $password;

            // Save the user basic info
            $this->User->create();
            if ($this->User->save($this->data)) {

                // Send the autogenerated password email
                $user = $this->User->findByEmail($this->data['User']['email']);

                $this->Session->setFlash(__('Your account has been created.<br /> An email has been sent to your registered email account with your username and a generated password.<br /> Use them here to login into your new account.', true));
                $this->Email->to = $user['User']['email'];
                $this->Email->subject = __('Your New Account Information', true);
                $this->Email->from = $this->from_support_email;
                $this->Email->template = 'register';

                $this->set('user', $user);
                $this->set('password', $password);

                $this->Email->send();

                if (Configure::read('debug') > 0){
                    $this->Email->delivery = 'debug';
                    $this->Email->send();
                    pr($this->Session->read('Message.email'));
                }
                if (Configure::read('debug') == 0)
                    $this->redirect(array('plugin' => 'auth', 'controller' => 'users', 'action' => 'login'));
            } else {
                $this->Session->setFlash(__('Your account could not be created.', true));
            }
        }
    }

    /**
     * Ran directly after the Auth component has executed
     */
    function login(){

        // Check for a successful login
        if (!empty($this->data) && $id = $this->Auth->user('id')) {

            // Set the lastlogin time
            $fields = array('lastlogin' => date('Y-m-d H:i:s'), 'modified' => false);
            $this->User->id = $id;
            $this->User->save($fields, false, array('lastlogin'));

            // Redirect the user
            $url = array('plugin' => 'auth', 'controller' => 'users', 'action' => 'account');
            if ($this->Session->check('Auth.redirect')) {
                $url = $this->Session->read('Auth.redirect');
            }
            $this->redirect($url);
        } elseif (!empty($this->data) && !$this->Auth->user()) {
            App::import('Helper', 'Html');
            $html = new HtmlHelper();

            $this->Session->setFlash(sprintf(__('ERROR: Incorrect username or password. Did you %1$s or %2$s?', true), $html->link(__('lost your password', true), array('plugin' => 'auth', 'controller' => 'users', 'action' => 'recover')), $html->link(__('forgot your username', true), array('plugin' => 'auth', 'controller' => 'users', 'action' => 'recover'))));
        } elseif ($this->Auth->user()) {
            $this->redirect(array('plugin' => 'auth', 'controller' => 'users', 'action' => 'account'));
        }
    }

    /**
     * Log a user out
     */
    function logout(){
        $this->Session->setFlash(__('You are now logged out.', true));
        $this->Auth->logoutRedirect = '/';
        return $this->redirect($this->Auth->logout());
    }

    /**
     * Account details page (and change password)
     */
    function account($id = false){

        if (!empty($this->data) && $id != false) {
            $this->User->set($this->data);

            // set the validation rules for password change or not
            if(
                (!$this->data['User']['password_confirm'] || $this->data['User']['password_confirm'] == '')
                && (!$this->data['User']['password_old'] || $this->data['User']['password_old'] == '')
                && ($this->data['User']['password'] == Security::hash('', null, true))
            ){
                unset($this->data['User']['password']);
                $this->User->useValidationRules('NoPassword');
            } else {
                $this->User->useValidationRules('ChangePassword');
            }

            if($this->User->validates()){

                $this->User->save($this->data);
                $this->Session->setFlash('Your account has been updated');
                $this->redirect(array('action' => 'account'));
            } else {
                $this->Session->setFlash(__('ERROR: please, check the error message(s) below', true));
            }
        }

        // Load the user (and populate profile data)
        $this->data = $this->User->find('first', array('conditions' => array('User.id' => $this->Auth->user('id'))));
        $this->set('gravatar_data', $this->gravatar);

        
    }

    /**
     * Allows the user to email himself a password reset token
     */
    function recover(){
        if ($this->Auth->user()) {
            $this->redirect(array('controller' => 'users', 'action' => 'account'));
        }

        if (!empty($this->data['User']['email'])) {
            $Token = ClassRegistry::init('Auth.Token');
            $user = $this->User->findByEmail($this->data['User']['email']);
            if($user === false)
                $user = $this->User->findByUsername($this->data['User']['email']);

            if ($user === false) {
                $this->Session->setFlash('No matching user found');
                return false;
            }

            $token = $Token->generate(array('User' => $user['User']));
            $this->Session->setFlash(__('An email has been sent to your registered email account, please follow the instructions in it.', true));
            $this->Email->to = $user['User']['email'];
            $this->Email->subject = __('Password Reset Request', true);
            $this->Email->from = $this->from_support_email;
            $this->Email->template = 'recover';
            $this->set('user', $user);
            $this->set('token', $token);

            $this->Email->send();

            if (Configure::read('debug') > 0){
                $this->Email->delivery = 'debug';
                $this->Email->send();
                pr($this->Session->read('Message.email'));
            }
        }
    }

    /**
     * Accepts a valid token and resets the user password
     */
    function verify($token_str = null){
        if ($this->Auth->user())
            $this->redirect(array('controller' => 'users', 'action' => 'account'));

        $Token = ClassRegistry::init('Auth.Token');
        
        $res = $Token->get($token_str);
        if ($res) {
            // Update the user password
            $password = $this->User->generatePassword();
            $this->User->id = $res['User']['id'];
            $this->User->saveField('password', $this->Auth->password($password));
            $this->set('success', true);

            // Send email with new password
            $this->Email->to = $res['User']['email'];
            $this->Email->subject = 'Password Changed';
            $this->Email->from = $this->from_support_email;
            $this->Email->template = 'verify';
            $this->set('user', $res);
            $this->set('password', $password);

            $this->Email->send();

            if (Configure::read('debug') > 0){
                $this->Email->delivery = 'debug';
                $this->Email->send();
                pr($this->Session->read('Message.email'));
            }
        }
    }
}
